# Importando os módulos necessários
import numpy as np
import pickle
import matplotlib.pyplot as plt
import sklearn
import pandas as pd
import os

# ativando os modelos do sklearn
from sklearn import linear_model
from sklearn.utils import shuffle

# Informando o diretório (path)
for dirname, _, filenames in os.walk('/content/drive/MyDrive/principal/Desafio/Desafio 1/microdados_enem_2019/DADOS'):
  for filename in filenames:
    print(os.path.join(dirname, filename))
    
# Lendo o conteúdo do arquivo, selecionando as colunas e marcando os registros que não tenham um número (NaN)
data = pd.read_csv("/content/drive/MyDrive/principal/Desafio/Desafio 1/microdados_enem_2019/DADOS/MICRODADOS_ENEM_2019.csv", sep=';', encoding='latin')
data = data [["NU_NOTA_CN", "NU_NOTA_MT", "NU_NOTA_LC", "NU_NOTA_CH"]]
predict =  "NU_NOTA_CN"
X = np.nan_to_num(np.array(data.drop([predict], axis = 1)))
y = np.nan_to_num(np.array(data[predict]))

# Treinando o modelo e apresentando o percentual de acuracia
x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X,y, test_size=0.25)
linear = linear_model.LinearRegression()
linear.fit(x_train, y_train)
acc = linear.score(x_test, y_test)
predictions = linear.predict(x_test)
print(f'{acc*100:.2f}%')

# Verificando a acurácia do modelo
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
print(f'Co: {linear.coef_}')
print(f'Intercept: {linear.intercept_}')
print(f'MSE: {mean_squared_error(y_test, predictions)}')
print(f'RMSE: {mean_absolute_error(y_test, predictions)}')
print('R2 Score: %.4f' % r2_score(y_test, predictions))

# ajustando os valores menores que 4 para 0
_d = {'Predictions':predictions, 'RealValues': y_test, 'Input':x_test.tolist()}
result_df = pd.DataFrame(_d)
result_df.loc[result_df.Predictions < 4.00,'Predictions'] = 0
print(result_df)

# Salvando a imagem
import pickle
with open('desafio1rg.pickle', 'wb') as f:
  pickle.dump(linear, f)

pickle_in = open('desafio1rg.pickle', 'rb')
linear = pickle.load(pickle_in)

# Gerando os gráficos
from  matplotlib import style

style.use('ggplot')

for p in data.columns:
  if p == 'NU_NOTA_CN':
    continue

  plt.scatter(data[p], data['NU_NOTA_CN'])
  plt.xlabel(p)
  plt.ylabel('Pontuação / Notas')
  plt.show()


